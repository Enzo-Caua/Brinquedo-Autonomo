// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2024 22:03:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chave_0;
reg chave_1;
reg clk_input;
reg reset;
// wires                                               
wire d0;
wire d1;
wire d2;
wire d3;
wire seg_a;
wire seg_b;
wire seg_c;
wire seg_d;
wire seg_e;
wire seg_f;
wire seg_g;

// assign statements (if any)                          
principal i1 (
// port map - connection between master ports and signals/registers   
	.chave_0(chave_0),
	.chave_1(chave_1),
	.clk_input(clk_input),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.reset(reset),
	.seg_a(seg_a),
	.seg_b(seg_b),
	.seg_c(seg_c),
	.seg_d(seg_d),
	.seg_e(seg_e),
	.seg_f(seg_f),
	.seg_g(seg_g)
);
initial 
begin 
#1000000 $finish;
end 

// chave_0
initial
begin
	chave_0 = 1'b0;
end 

// chave_1
initial
begin
	chave_1 = 1'b1;
end 

// clk_input
always
begin
	clk_input = 1'b0;
	clk_input = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

